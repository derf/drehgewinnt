#!/usr/bin/env perl

use strict;
use warnings;
use 5.010;
use Clone qw(clone);
use Getopt::Std;
use Term::ReadKey;

our $VERSION = '0.0';

my @field;
my @points;
my $pcur    = 1;
my $ppos    = 0;
my $owidth  = 6;
my $oheight = 5;

my @info_lines = (
	sub {
		return 'score';
	},
	sub {
		return sprintf( '%s%-3d %s%-3d%s',
			"\e[1m", $points[0], "\e[31m", $points[1], "\e[0m" );
	},
);

sub draw_field {
	my ( $field, $char ) = @_;

	$char //= '●';

	given ($field) {
		when (0) { print q{ } }
		when (1) { print $char }
		when (2) { print "\e[0;31m${char}\e[0;m" }
		default  { print q{?} }
	}
	return;
}

sub draw_game {
	for my $x ( 0 .. $owidth ) {
		print q{ };
		if ( $x == $ppos ) {
			if ( $field[$ppos][0] == 0 ) {
				draw_field( $pcur, '▼' );
			}
			else {
				draw_field( $pcur, '▽' );
			}
		}
		else {
			print q{ };
		}
	}
	print "\n";
	for my $y ( 0 .. $oheight ) {
		if ( $y == 0 ) {
			print '┌─';
			for ( 1 .. $owidth ) {
				print '┬─';
			}
			print '┐';
		}
		else {
			print '├─';
			for ( 1 .. $owidth ) {
				print '┼─';
			}
			print '┤';
		}
		if ( defined $info_lines[ $y * 2 ] ) {
			print q{    } . &{ $info_lines[ $y * 2 ] };
		}
		print "\n";
		for my $x ( 0 .. $owidth ) {
			print q{│};
			draw_field( $field[$x][$y] );
		}
		print '│';
		if ( defined $info_lines[ $y * 2 + 1 ] ) {
			print q{    } . &{ $info_lines[ $y * 2 + 1 ] };
		}
		print "\n";
	}
	print '└─';
	for ( 1 .. $owidth ) {
		print '┴─';
	}
	print "┘\n";

	return;
}

sub ini_field {
	@points = (0) x 2;
	for my $x ( 0 .. $owidth ) {
		for my $y ( 0 .. $oheight ) {
			$field[$x][$y] = 0;
		}
	}
	return;
}

sub ini_game {
	my %opts;
	getopts( 'h:w:', \%opts );

	if ( $opts{h} ) {
		$oheight = $opts{h} - 1;
		if ( $oheight < 3 ) {
			die("Setting height < 4 does not make sense (noone can win)\n");
		}
	}
	if ( $opts{w} ) {
		$owidth = $opts{w} - 1;
		if ( $owidth < 3 ) {
			die("Setting width < 4 does not make sense (noone can win)\n");
		}
	}

	ini_field();

	return;
}

sub add_stone {
	my ( $x, $player ) = @_;

	if ( $player == 0 ) {
		return 0;
	}

	for my $y ( 0 .. $oheight ) {
		if ( $field[$x][ $oheight - $y ] == 0 ) {
			$field[$x][ $oheight - $y ] = $player;
			check_points( $x, $oheight - $y );
			return 1;
		}
	}
	return 0;
}

sub rotate {
	my @tmp_field = @{ clone( \@field ) };
	my $tmp       = $owidth;
	$owidth  = $oheight;
	$oheight = $tmp;
	ini_field();

	for my $x ( 0 .. $oheight ) {
		for my $y ( 0 .. $owidth ) {
			add_stone( $owidth - $y, $tmp_field[ $oheight - $x ][$y] );
		}
	}
	return;
}

sub count_field {
	my ( $x, $y, $cnt ) = @_;

	if ( $field[$x][$y] == 1 ) {
		$cnt->[0]++;
		$cnt->[1] = 0;
	}
	elsif ( $field[$x][$y] == 2 ) {
		$cnt->[1]++;
		$cnt->[0] = 0;
	}
	else {
		$cnt = [ (0) x 2 ];
	}
	for my $p ( 0 .. 1 ) {
		if ( $cnt->[$p] >= 4 ) {
			$points[$p]++;
		}
	}
	return;
}

sub check_points {
	my ( $px, $py ) = @_;
	my @cnt = (0) x 2;

	my $left   = $px - 3;
	my $right  = $px + 3;
	my $top    = $py - 3;
	my $bottom = $py + 3;

	my $dx = $px;
	my $dy = $py;

	if ( $left < 0 )          { $left   = 0 }
	if ( $right > $owidth )   { $right  = $owidth }
	if ( $top < 0 )           { $top    = 0 }
	if ( $bottom > $oheight ) { $bottom = $oheight }

	for ( 1 .. 3 ) {
		if ( $dx > 0 and $dy > 0 ) {
			$dx--;
			$dy--;
		}
	}
	while ( $dx <= $owidth and $dy <= $oheight and $dx - $px < 4 ) {
		count_field( $dx, $dy, \@cnt );
		$dx++;
		$dy++;
	}
	@cnt = (0) x 2;
	( $dx, $dy ) = ( $px, $py );
	for ( 1 .. 3 ) {
		if ( $dx > 0 and $dy < $oheight ) {
			$dx--;
			$dy++;
		}
	}
	while ( $dx <= $owidth and $dy >= 0 and $dx - $px < 4 ) {
		count_field( $dx, $dy, \@cnt );
		$dx++;
		$dy--;
	}

	@cnt = (0) x 2;
	for my $x ( $left .. $right ) {
		count_field( $x, $py, \@cnt );
	}

	@cnt = (0) x 2;
	for my $y ( $top .. $bottom ) {
		count_field( $px, $y, \@cnt );
	}

	return;
}

ini_game();
draw_game();

ReadMode(3);
while ( my $key = ReadKey(0) ) {
	given ($key) {
		when ('D') {
			$ppos = ( $ppos + $owidth ) % ( $owidth + 1 );
		}
		when ('C') {
			$ppos = ( $ppos + 1 ) % ( $owidth + 1 );
		}
		when ('B') {
			if ( add_stone( $ppos, $pcur ) ) {
				$pcur = ( !( $pcur - 1 ) ) + 1;
			}
		}
		when ('r') {
			rotate();
		}
		when ('q') {
			ReadMode(0);
			last;
		}
	}
	draw_game();
}

__END__

=head1 NAME

=head1 SYNOPSIS

=head1 VERSION

=head1 DESCRIPTION

=head1 OPTIONS

=over

=back

=head1 EXIT STATUS

=head1 CONFIGURATION

None.

=head1 DEPENDENCIES

=over

=back

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Copyright (C) 2012 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

  0. You just DO WHAT THE FUCK YOU WANT TO.
